-- ui variables------------
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()


--- variables autofarm---


local player = game:GetService('Players').LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild('Humanoid')
local humanoidRootPart = character:WaitForChild('HumanoidRootPart')
player.Idled:connect(function()
    game:GetService('VirtualUser'):CaptureController()
    game:GetService('VirtualUser'):ClickButton2(Vector2.new())
end)
local totalKills = player:WaitForChild('leaderstats'):WaitForChild('Total Kills')
local monthlyKills = player:WaitForChild('leaderstats'):WaitForChild('Kills')
local part = Instance.new('Part')
local Lxchu = Instance.new("ScreenGui")
local Interface = Instance.new("Frame")
local Subcredits = Instance.new("TextLabel")
local Title = Instance.new("TextLabel")
local TotalKills = Instance.new("TextLabel")
local KillsGranted = Instance.new("TextLabel")
local Reset = Instance.new("TextButton")
local UICorner = Instance.new("UICorner")
local FarmMetheod = Instance.new("TextLabel")
Lxchu.Name = "Farming"
Lxchu.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
Lxchu.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
Lxchu.IgnoreGuiInset = true
Lxchu.ResetOnSpawn = false
part.Anchored = true
part.Transparency = 1
part.Name = "Farming Ground"
part.Size = Vector3.new(2048,20,2048)
part.CFrame = CFrame.new(150,10000,30)
part.Parent = workspace

--- script main---


local Window = Fluent:CreateWindow({
    Title = "The strongest Auto farm  " .. Fluent.Version,
    SubTitle = "by  theyfw_lxchu and collab with Dave_Down ",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

do
    Fluent:Notify({
        Title = "Notification",
        Content = "This is a notification",
        SubContent = "SubContent", -- Optional
        Duration = 5 -- Set to nil to make the notification not disappear
    })



-- Function to update both the paragraph Content (TextLabel) and direct TextLabels
        local totalText = "Total Kills: " .. totalKills.Value
        local monthlyText = "Total Monthly Kills: " .. monthlyKills.Value

        -- Update the TextLabel inside the paragraph (assuming Content is a TextLabel)
        if Tabs.Main and Tabs.Main.AddParagraph then
            Tabs.Main:AddParagraph({
                Title = "TSB Autofarm",
                Content = totalText  -- Content acts as a TextLabel
            })
            
            Tabs.Main:AddParagraph({
                Title = "TSB Autofarm",
                Content = monthlyText  -- Content acts as a TextLabel
            })
        end




-- Connect change events
totalKills.Changed:Connect(updateKillDisplays)





    local Toggle = Tabs.Main:AddToggle("MyToggle", {
        Title = "Auto Farm Toggle",
        Default = false
    })
    
    local teleportConnection = nil
    
    Toggle:OnChanged(function(Value)
        print("Toggle changed:", Value)
        
        while task.wait(0.1) and Options.MyToggle.Value do
            if player.Backpack:FindFirstChild('Shove') then
                humanoidRootPart.CFrame = part.CFrame * CFrame.new(0, 11, 0)
                
                -- Equip and use all tools
                for _, tool in pairs(player.Backpack:GetChildren()) do
                    if tool:IsA('Tool') then
                        humanoid:EquipTool(tool)
                        task.wait(0.001)
                        tool:Activate()
                        humanoid:UnequipTools()
                        task.wait(0.001)
                    end
                end
            else
                -- Teleport to safe spot if no Shove
                humanoidRootPart.CFrame = part.CFrame * CFrame.new(0, 11, -2)
                
                -- Setup respawn handler if not already exists
                if not teleportConnection then
                    teleportConnection = player.CharacterAdded:Connect(function(char)
                        local hrp = char:WaitForChild("HumanoidRootPart")
                        hrp.CFrame = part.CFrame * CFrame.new(0, 11, -2)
                    end)
                end
            end
        end
        
        -- Cleanup when toggle is off
        if not Options.MyToggle.Value then
            if teleportConnection then
                teleportConnection:Disconnect()
                teleportConnection = nil
            end
        end
    end)
    
    Options.MyToggle:SetValue(false)  -- Initialize as off






end


-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
